schemaVersion: 2.2.2
metadata:
  name: openvsx
components:
  - name: tool
    container:
      image: quay.io/devfile/universal-developer-image:ubi8-latest
      memoryRequest: 256Mi
      memoryLimit: 8Gi
      cpuRequest: 100m
      cpuLimit: 2000m
      env:
        - name: OPENVSX_NAMESPACE
          value: openvsx
      volumeMounts:
        - name: local
          path: /home/user/.local/
      endpoints:
        - name: openvsx
          exposure: internal
          protocol: https
          targetPort: 5432
  - volume:
      ephemeral: true
    name: local
commands:
  - id: oc-login
    exec:
      label: "1. OC log-in"
      commandLine: |
        echo "Please log in to the OpenShift cluster as a cluster admin using the oc command"
      component: tool
  - id: build-openvsx-image
    exec:
      label: "2. Build and Publish OpenVSX Image"
      component: tool
      workingDir: ${PROJECTS_ROOT}/che-openvsx/openshift
      commandLine: |
          read -p "Please enter the value for OPENVSX_VERSION (default: v0.17.0): " OPENVSX_VERSION
          OPENVSX_VERSION=${OPENVSX_VERSION:-v0.17.0}
          export OPENVSX_VERSION
          echo "OPENVSX_VERSION is set to $OPENVSX_VERSION"
          podman build -t "openvsx:$OPENVSX_VERSION" --build-arg "OPENVSX_VERSION=$OPENVSX_VERSION" -f openvsx.Dockerfile .&&
          oc new-project $OPENVSX_NAMESPACE
          export IMAGE=image-registry.openshift-image-registry.svc:5000/openshift/$OPENVSX_NAMESPACE &&
          podman tag openvsx:$OPENVSX_VERSION ${IMAGE} &&
          podman login --tls-verify=false -u $(oc whoami | tr -d :) -p $(oc whoami -t) image-registry.openshift-image-registry.svc:5000 &&
          podman push --tls-verify=false "${IMAGE}"
  - id: configure-custom-plugin-registry
    exec:
      label: "3. Configure Che to use the Custom Plugin Registry"
      component: tool
      workingDir: ${PROJECTS_ROOT}/devspaces/dependencies/che-plugin-registry
      commandLine: |
          export IMAGE=image-registry.openshift-image-registry.svc:5000/$(kubectl get sa default -o json | jq -r '.metadata.namespace')/che-plugin-registry &&
          export CHECLUSTER_NAMESPACE="$(kubectl get checluster --all-namespaces -o json | jq -r '.items[0].metadata.namespace')" &&
          kubectl create secret -n "${CHECLUSTER_NAMESPACE}" docker-registry regcred --docker-server=image-registry.openshift-image-registry.svc:5000 --docker-username=$(oc whoami | tr -d :) --docker-password=$(oc whoami -t) &&
          kubectl patch serviceaccount default -n "${CHECLUSTER_NAMESPACE}" -p '{"imagePullSecrets": [{"name": "regcred"}]}' &&
          ./patch-cluster.sh "${IMAGE}"
  - id: enable-embedded-openvsx
    exec:
      label: "4. Configure Che to use the embedded Eclipse Open VSX server"
      component: tool
      workingDir: ${PROJECTS_ROOT}/devspaces/dependencies/che-plugin-registry
      commandLine: |
          export CHECLUSTER_NAME="$(kubectl get checluster --all-namespaces -o json | jq -r '.items[0].metadata.name')" &&
          export CHECLUSTER_NAMESPACE="$(kubectl get checluster --all-namespaces -o json | jq -r '.items[0].metadata.namespace')" &&
          export PATCH='{"spec":{"components":{"pluginRegistry":{"openVSXURL":""}}}}' &&
          kubectl patch checluster "${CHECLUSTER_NAME}" --type=merge --patch "${PATCH}" -n "${CHECLUSTER_NAMESPACE}"
  - id: build
    exec:
      label: "5. Build"
      component: tool
      workingDir: ${PROJECTS_ROOT}/devspaces/dependencies/che-plugin-registry
      commandLine: |
          set -o xtrace;
          rm -rf output;
          mkdir output;
          BUILDER=podman SKIP_TEST=true SKIP_FORMAT=true SKIP_LINT=true NODE_BUILD_OPTIONS="-max-old-space-size=1024" ./build.sh
